const express = require('express');
const router = express.Router();
const mongoose = require("mongoose");
const Meeting = require('../../Models/Metting');
const User = require('../../Models/User');
const Subject = require('../../Models/Subject');

// üìå 1Ô∏è‚É£ T·∫°o m·ªôt cu·ªôc h·ªçp m·ªõi
router.post("/create", async (req, res) => {
    try {
        console.log("üì• D·ªØ li·ªáu nh·∫≠n t·ª´ client:", req.body); // Log d·ªØ li·ªáu nh·∫≠n v√†o
        
        // L·∫•y d·ªØ li·ªáu t·ª´ request
        const { meeting_date, meeting_time, tutor_id, student_ids, subject_id, location, created_by } = req.body;

        // üõë Ki·ªÉm tra n·∫øu thi·∫øu tr∆∞·ªùng n√†o th√¨ b√°o l·ªói
        if (!meeting_date || !meeting_time || !tutor_id || !student_ids || !subject_id || !location || !created_by) {
            console.log("‚ö†Ô∏è Thi·∫øu d·ªØ li·ªáu:", req.body);
            return res.status(400).json({ message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
        }

        if (!Array.isArray(student_ids) || student_ids.length === 0) {
            return res.status(400).json({ message: "Danh s√°ch h·ªçc sinh kh√¥ng h·ª£p l·ªá!" });
        }

        // üü¢ T·∫°o cu·ªôc h·ªçp v·ªõi nhi·ªÅu h·ªçc sinh
        const newMeeting = new Meeting({
            meeting_date,
            meeting_time,
            tutor_id,
            student_ids,
            subject_id,
            location,
            created_by,
        });

        await newMeeting.save(); // L∆∞u v√†o database
        console.log("‚úÖ Cu·ªôc h·ªçp ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng");
        res.status(201).json({ message: "Cu·ªôc h·ªçp ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng" });

    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o cu·ªôc h·ªçp:", error); // Log l·ªói chi ti·∫øt
        res.status(500).json({ message: "L·ªói khi t·∫°o cu·ªôc h·ªçp!", error });
    }
});

router.get("/", async (req, res) => {
    try {
        const meetings = await Meeting.find()
            .populate("tutor_id", "name")
            .populate("student_ids", "name") // S·ª≠a student_id th√†nh student_ids
            
            .populate("created_by", "name");

        res.json(meetings);
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch cu·ªôc h·ªçp:", error);
        res.status(500).json({ error: "L·ªói server" });
    }
});

// üìå 4Ô∏è‚É£ Ghi nh·∫≠n s·ª± c√≥ m·∫∑t c·ªßa ng∆∞·ªùi tham gia
router.put('/:id/attendance', async (req, res) => {
    try {
        const { user_id, status } = req.body;
        const meetingId = req.params.id.trim();

        // üõë Ki·ªÉm tra `id` c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(meetingId)) {
            return res.status(400).json({ error: "ID cu·ªôc h·ªçp kh√¥ng h·ª£p l·ªá!" });
        }
        if (!mongoose.Types.ObjectId.isValid(user_id)) {
            return res.status(400).json({ error: "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá!" });
        }

        // üü¢ T√¨m cu·ªôc h·ªçp
        const meeting = await Meeting.findById(meetingId);
        if (!meeting) {
            return res.status(404).json({ message: "Cu·ªôc h·ªçp kh√¥ng t·ªìn t·∫°i!" });
        }

        // üîç T√¨m xem user c√≥ trong danh s√°ch ƒëi·ªÉm danh ch∆∞a
        const index = meeting.attendance.findIndex(a => a.user_id.toString() === user_id);
        if (index !== -1) {
            meeting.attendance[index].status = status;
        } else {
            meeting.attendance.push({ user_id, status });
        }

        // üíæ L∆∞u v√†o database
        await meeting.save();

        res.status(200).json({ message: "Ghi nh·∫≠n ƒëi·ªÉm danh th√†nh c√¥ng!", meeting });
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÉm danh:", error);
        res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÉm danh!", error });
    }
});


router.get("/:id", async (req, res) => {
    try {
        const meeting = await Meeting.findById(req.params.id)
            .populate("tutor_id", "name")
            .populate("student_ids", "name")
            .populate("created_by", "name");

        if (!meeting) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y cu·ªôc h·ªçp!" });
        }

        res.status(200).json(meeting);
    } catch (error) {
        console.error("L·ªói khi l·∫•y cu·ªôc h·ªçp:", error);
        res.status(500).json({ message: "L·ªói server!" });
    }
});

router.delete("/:id", async (req, res) => {
    try {
        const meetingId = req.params.id.trim();

        // üõë Ki·ªÉm tra ID h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(meetingId)) {
            return res.status(400).json({ error: "ID cu·ªôc h·ªçp kh√¥ng h·ª£p l·ªá!" });
        }

        // ‚ùå X√≥a cu·ªôc h·ªçp
        const deletedMeeting = await Meeting.findByIdAndDelete(meetingId);

        if (!deletedMeeting) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y cu·ªôc h·ªçp!" });
        }

        res.status(200).json({ message: "X√≥a cu·ªôc h·ªçp th√†nh c√¥ng!" });
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a cu·ªôc h·ªçp:", error);
        res.status(500).json({ message: "L·ªói server khi x√≥a cu·ªôc h·ªçp!" });
    }
});

module.exports = router;
